10
423		1
0	
	9
70	!=	4
163	"1";	1
164	"ARB";	7
1	"Ageless	1
71	"Agonizing	1
165	"Anathemancer",	1
209	"Architects	1
270	"Ardent	1
281	"Arsenal	1
424	"As	1
343	"Aven	1
405	"Bant	2
2	"DDH";	3
282	"Do	1
72	"If	1
132	"Ogre	1
425	"and	1
133	"if	1
210	"look	1
166	"nonbasic	1
3	"put	1
283	"you	1
167	"{1}{B}{R}");	1
406	"{1}{G}{W}{U}");	1
271	"{1}{W}{U}");	2
211	"{2}{U}{B}");	1
284	"{2}{W/B}{U}");	1
73	"{3}{B}");	1
4	"{3}{G}{G}");	1
134	"{4}{R}");	1
426	"{G/U}{W}");	1
344	&&	1
345	(!target.getAbilities().contains(FlyingAbility.getInstance()))	1
5	(Integer)	1
272	(UUID	2
285	(arsenalThresher	1
212	(card	1
286	(controller	1
287	(controller.choose(Outcome.Benefit,	1
288	(controller.chooseUse(Outcome.Benefit,	1
289	(controller.getHand().count(filter,	1
346	(creature	1
273	(final	1
213	(int	1
6	(lifeGained	1
168	(sourceAbility.getFirstTarget()	1
347	(target	1
214	(targetPlayer	1
7	+1/+1	2
427	+1/+1"));	1
8	0)	2
169	0;	2
348	1)	1
274	1,	1
407	125,	1
290	131,	1
428	143,	1
215	17,	1
9	18,	1
349	2,	1
216	3);	1
350	3/1	1
170	33,	1
135	55,	1
74	66,	1
291	:	1
217	<	2
10	=	10
171	==	3
11	>	2
12	@Override	10
13	Ability	8
14	AddCountersSourceEffect(CounterType.P1P1.createInstance(lifeGained)).apply(game,	1
351	AddCountersTargetEffect(CounterType.FEATHER.createInstance()),	1
15	AgelessEntity	1
16	AgelessEntity(UUID	1
17	AgelessEntity(final	1
18	AgelessEntity(this);	1
19	AgelessEntityEffect	1
20	AgelessEntityEffect()	1
21	AgelessEntityEffect(),	1
22	AgelessEntityEffect(final	1
23	AgelessEntityEffect(this);	1
75	AgonizingDemise	1
76	AgonizingDemise(UUID	1
77	AgonizingDemise(final	1
78	AgonizingDemise(this);	1
79	AgonizingDemiseEffect	1
80	AgonizingDemiseEffect()	1
81	AgonizingDemiseEffect(),	1
82	AgonizingDemiseEffect(final	1
83	AgonizingDemiseEffect(this);	1
172	Anathemancer	1
173	Anathemancer(UUID	1
174	Anathemancer(final	1
175	Anathemancer(this);	1
176	AnathemancerCount	1
177	AnathemancerCount()));	1
178	AnathemancerCount();	1
292	AnotherCardPredicate());	1
429	AnotherPredicate());	1
218	ArchitectsOfWill	1
219	ArchitectsOfWill(UUID	1
220	ArchitectsOfWill(final	1
221	ArchitectsOfWill(this);	1
222	ArchitectsOfWillEffect	1
223	ArchitectsOfWillEffect()	1
224	ArchitectsOfWillEffect(),	1
225	ArchitectsOfWillEffect(final	1
226	ArchitectsOfWillEffect(this);	1
275	ArdentPlea	1
276	ArdentPlea(this);	1
293	ArsenalThresher	1
294	ArsenalThresher(UUID	1
295	ArsenalThresher(final	1
296	ArsenalThresher(this);	1
297	ArsenalThresherEffect	1
298	ArsenalThresherEffect()	1
299	ArsenalThresherEffect(),	1
300	ArsenalThresherEffect(final	1
301	ArsenalThresherEffect(this);	1
302	AsEntersBattlefieldAbility(new	1
352	AvenEffect	1
353	AvenEffect()	1
354	AvenEffect());	1
355	AvenEffect(final	1
356	AvenEffect(this);	1
357	AvenEffect2	1
358	AvenEffect2()	1
359	AvenEffect2());	1
360	AvenEffect2(final	1
361	AvenEffect2(this);	1
362	AvenMimeomancer	1
363	AvenMimeomancer(UUID	1
364	AvenMimeomancer(final	1
365	AvenMimeomancer(this);	1
408	BantSojourners	1
409	BantSojourners(UUID	1
410	BantSojourners(final	1
411	BantSojourners(this);	1
430	BantSureblade	1
431	BantSureblade(UUID	1
432	BantSureblade(final	1
433	BantSureblade(this);	1
366	BeginningOfUpkeepTriggeredAbility(Zone.BATTLEFIELD,	1
434	BoostSourceEffect(1,1,	1
227	Card	1
24	CardImpl	10
228	CardType.CREATURE},	2
229	CardType[]{CardType.ARTIFACT,	2
25	CardType[]{CardType.CREATURE},	6
277	CardType[]{CardType.ENCHANTMENT},	1
84	CardType[]{CardType.INSTANT},	1
230	Cards	2
231	CardsImpl();	2
278	CascadeAbility());	1
85	ColorPredicate(ObjectColor.BLACK)));	1
435	ConditionalContinuousEffect(	1
86	ConditionalOneShotEffect(	1
136	ConditionalTriggeredAbility(ability,	1
367	ContinuousEffectImpl	1
179	ControllerIdPredicate(sourceAbility.getFirstTarget()));	1
412	CreateTokenEffect(new	1
413	CycleTriggeredAbility(new	1
232	CyclingAbility(new	2
180	DamageTargetEffect(new	1
87	Demise",	1
88	DestroyTargetEffect());	1
414	DiesTriggeredAbility(new	1
436	Duration.WhileOnBattlefield),	1
181	DynamicValue	1
182	Effect	1
183	EntersBattlefieldTriggeredAbility	1
137	EntersBattlefieldTriggeredAbility(new	3
26	Entity",	1
279	ExaltedAbility());	1
303	FilterArtifactCard	1
304	FilterArtifactCard();	1
437	FilterControlledPermanent	1
438	FilterControlledPermanent("another	1
89	FilterCreaturePermanent	1
90	FilterCreaturePermanent("nonblack	1
184	FilterLandPermanent	1
185	FilterLandPermanent();	1
439	GainAbilitySourceEffect(FirstStrikeAbility.getInstance()),	1
27	GainLifeControllerTriggeredAbility(new	1
368	Game	1
305	Integer.MAX_VALUE,	1
91	KickedCondition.getInstance(),	1
92	KickerAbility("{1}{R}"));	1
369	Layer.AbilityAddingRemovingEffects_6,	1
370	Layer.PTChangingEffects_7,	1
371	MageInt(1);	2
138	MageInt(2);	5
139	MageInt(3);	3
28	MageInt(4);	2
415	ManaCostsImpl("{2}{W}")));	1
186	ManaCostsImpl("{5}{B}{R}")));	1
233	ManaCostsImpl("{U/B}")));	1
140	ManaSpentToCastWatcher());	1
141	ManaWasSpentCondition(ColoredManaSymbol.U),	1
234	Math.min(targetPlayer.getLibrary().size(),	1
372	Mimeomancer",	1
440	MulticoloredPredicate());	1
142	OgreSavant	1
143	OgreSavant(UUID	1
144	OgreSavant(final	1
145	OgreSavant(this);	1
29	OneShotEffect	4
373	Outcome.BoostCreature);	1
93	Permanent	3
441	PermanentsOnTheBattlefieldCondition(filter),	1
94	Player	3
280	Plea",	1
95	Rarity.COMMON,	6
30	Rarity.RARE,	2
187	Rarity.UNCOMMON,	2
146	ReturnToHandTargetEffect(),false);	1
147	Savant",	1
442	SimpleStaticAbility(Zone.BATTLEFIELD,	1
416	Sojourners",	1
417	SoldierToken()),	1
188	String	2
374	StringBuilder	1
375	StringBuilder();	1
376	SubLayer.NA,	1
377	SubLayer.SetPT_7b,	1
189	SupertypePredicate("Basic")));	1
443	Sureblade",	1
306	TargetCardInHand	1
307	TargetCardInHand(0,	1
378	TargetController.YOU,	1
148	TargetCreaturePermanent());	2
96	TargetCreaturePermanent(filterNonBlackCreature));	1
190	TargetPlayer());	2
308	Thresher",	1
149	TriggeredAbility	1
191	UnearthAbility(new	1
235	Will",	1
309	a	2
150	ability	5
379	ability.addEffect(new	2
151	ability.addTarget(new	4
418	ability1	1
419	ability2	1
97	amount	1
380	and	1
444	another	1
236	any	2
31	apply(Game	5
310	arsenalThresher	1
311	arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()),	1
312	artifact	1
313	artifacts	1
381	as	2
237	at	1
238	back	1
382	base	1
314	battlefield	1
32	boolean	5
192	calculate(Game	1
239	card	2
33	card)	10
240	cards	2
241	cards,	2
242	cards.add(card);	1
315	cards.add(controller.getHand().get(uuid,	1
152	cast	1
34	class	10
445	control	1
98	controller	3
99	controller."));	1
100	controller.damage(amount,	1
243	controller.lookAtCards("Architects	1
244	controller.putCardsOnTopOfLibrary(cards,	1
316	controller.revealCards(arsenalThresher.getIdName(),	1
193	controls";	1
35	copy()	10
245	count	1
246	count;	1
317	counter	2
36	counters	1
153	creature	2
101	creature");	1
37	creature";	1
102	creature's	1
383	creature.getCounters().getCount(CounterType.FEATHER)	1
103	damage	1
104	deals	1
384	do,	1
318	each	1
38	effect)	6
319	enters	1
105	equal	1
39	extends	10
247	false);	1
40	false,	2
41	false;	5
385	feather	1
194	filter	3
320	filter);	1
195	filter.add(Predicates.not(new	1
196	filter.add(new	3
106	filterNonBlackCreature	1
107	filterNonBlackCreature.add(Predicates.not(new	1
108	final	2
446	first	1
386	flying	1
248	for	3
321	from	1
322	game)	2
323	game))	1
324	game));	1
197	game);	4
42	game,	6
198	game.getBattlefield().count(filter,	1
387	game.getPermanent(source.getFirstTarget());	1
388	game.getPermanent(this.targetPointer.getFirst(game,	1
325	game.getPermanentEntering(source.getSourceId());	1
109	game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game,	1
110	game.getPlayer(permanent.getControllerId());	1
249	game.getPlayer(source.getControllerId());	2
250	game.getPlayer(source.getFirstTarget());	1
199	getMessage()	1
389	getText(Mode	1
447	gets	1
326	hand.	1
154	hand."),	1
327	hand?",	1
390	has	2
251	i	1
252	i++)	1
43	if	5
111	if(controller	1
112	if(permanent	1
200	implements	1
253	in	2
44	int	4
391	isInactive(Ability	1
113	it	3
392	it");	1
155	its	1
114	kicked,	1
201	lands	1
254	library,	1
45	lifeGained	1
393	long	2
46	many	1
328	may	1
394	mode)	1
448	multicolor	1
449	multicolored	1
47	new	10
255	null	2
115	null)	5
329	number	1
256	of	2
48	on	3
257	order";	1
330	other	1
156	owner's	1
49	ownerId)	10
116	permanent	1
450	permanent");	1
451	permanent,	1
117	permanent.getPower().getValue();	1
202	player	1
258	player's	1
118	power	2
119	private	2
50	public	10
259	put	1
51	return	10
331	reveal	1
332	revealed	1
395	sb	1
396	sb.append("If	1
397	sb.toString();	1
52	source)	5
120	source));	2
53	source);	1
260	source,	3
333	source.getControllerId(),	1
121	source.getSourceId(),	3
203	sourceAbility,	1
204	sourceAbility.getControllerId(),	1
205	sourceAbility.getSourceId(),	1
157	spent	1
122	static	2
452	strike"));	1
398	super(Duration.Custom,	1
54	super(Outcome.Benefit);	2
123	super(Outcome.Damage);	1
261	super(Outcome.DrawCard);	1
55	super(card);	10
56	super(effect);	5
57	super(ownerId,	10
158	target	4
334	target,	1
399	target.addAbility(FlyingAbility.getInstance(),	1
400	target.getPower().setValue(3);	1
335	target.getTargets())	1
401	target.getToughness().setValue(1);	1
262	targetPlayer	1
263	targetPlayer.getLibrary().removeFromTop(game);	1
58	that	4
124	the	3
264	them	1
265	then	1
59	this	2
402	this.addAbility(FlyingAbility.getInstance());	1
206	this.addAbility(ability);	4
420	this.addAbility(ability1);	1
421	this.addAbility(ability2);	1
60	this.addAbility(new	8
61	this.expansionSetCode	10
125	this.getSpellAbility().addEffect(new	1
126	this.getSpellAbility().addTarget(new	1
62	this.getValue("gainedLife");	1
63	this.power	8
64	this.staticText	2
403	this.subtype.add("Bird");	1
336	this.subtype.add("Construct");	1
65	this.subtype.add("Elemental");	1
266	this.subtype.add("Human");	3
159	this.subtype.add("Ogre");	1
422	this.subtype.add("Soldier");	2
160	this.subtype.add("Wizard");	4
207	this.subtype.add("Zombie");	1
66	this.toughness	8
267	three	1
127	to	3
208	toString()	1
268	top	1
404	toughness	1
67	true));	1
128	true);	4
129	true;	4
337	uuid	1
338	want	1
130	was	2
339	way"));	1
340	with	1
341	you	3
342	your	1
68	{	10
161	{U}	1
131	{this}	3
162	{this},	1
269	||	1
69	}	10

public class AgelessEntity extends CardImpl {§public AgelessEntity(UUID ownerId) {§super(ownerId, 18, "Ageless Entity", Rarity.RARE, new CardType[]{CardType.CREATURE}, "{3}{G}{G}");§this.expansionSetCode = "DDH";§this.subtype.add("Elemental");§this.power = new MageInt(4);§this.toughness = new MageInt(4);§this.addAbility(new GainLifeControllerTriggeredAbility(new AgelessEntityEffect(), false, true));§}§public AgelessEntity(final AgelessEntity card) {§super(card);§}§@Override§public AgelessEntity copy() {§return new AgelessEntity(this);§}§}§class AgelessEntityEffect extends OneShotEffect {§public AgelessEntityEffect() {§super(Outcome.Benefit);§this.staticText = "put that many +1/+1 counters on this creature";§}§public AgelessEntityEffect(final AgelessEntityEffect effect) {§super(effect);§}§@Override§public AgelessEntityEffect copy() {§return new AgelessEntityEffect(this);§}§@Override§public boolean apply(Game game, Ability source) {§int lifeGained = (Integer) this.getValue("gainedLife");§if (lifeGained > 0) {§return new AddCountersSourceEffect(CounterType.P1P1.createInstance(lifeGained)).apply(game, source);§}§return false;§}§}§
public class AgonizingDemise extends CardImpl {§private static final FilterCreaturePermanent filterNonBlackCreature = new FilterCreaturePermanent("nonblack creature");§static {§filterNonBlackCreature.add(Predicates.not(new ColorPredicate(ObjectColor.BLACK)));§}§public AgonizingDemise(UUID ownerId) {§super(ownerId, 66, "Agonizing Demise", Rarity.COMMON, new CardType[]{CardType.INSTANT}, "{3}{B}");§this.expansionSetCode = "DDH";§this.addAbility(new KickerAbility("{1}{R}"));§this.getSpellAbility().addEffect(new DestroyTargetEffect());§this.getSpellAbility().addTarget(new TargetCreaturePermanent(filterNonBlackCreature));§this.getSpellAbility().addEffect(new ConditionalOneShotEffect(§new AgonizingDemiseEffect(),§KickedCondition.getInstance(),§"If {this} was kicked, it deals damage equal to that creature's power to the creature's controller."));§}§public AgonizingDemise(final AgonizingDemise card) {§super(card);§}§@Override§public AgonizingDemise copy() {§return new AgonizingDemise(this);§}§}§class AgonizingDemiseEffect extends OneShotEffect {§public AgonizingDemiseEffect() {§super(Outcome.Damage);§}§public AgonizingDemiseEffect(final AgonizingDemiseEffect effect) {§super(effect);§}§@Override§public AgonizingDemiseEffect copy() {§return new AgonizingDemiseEffect(this);§}§@Override§public boolean apply(Game game, Ability source) {§Permanent permanent = game.getPermanentOrLKIBattlefield(this.getTargetPointer().getFirst(game, source));§if(permanent != null) {§Player controller = game.getPlayer(permanent.getControllerId());§if(controller != null) {§int amount = permanent.getPower().getValue();§controller.damage(amount, source.getSourceId(), game, false, true);§return true;§}§}§return false;§}§}§
public class OgreSavant extends CardImpl {§public OgreSavant(UUID ownerId) {§super(ownerId, 55, "Ogre Savant", Rarity.COMMON, new CardType[]{CardType.CREATURE}, "{4}{R}");§this.expansionSetCode = "DDH";§this.subtype.add("Ogre");§this.subtype.add("Wizard");§this.power = new MageInt(3);§this.toughness = new MageInt(2);§TriggeredAbility ability = new EntersBattlefieldTriggeredAbility(new ReturnToHandTargetEffect(),false);§ability.addTarget(new TargetCreaturePermanent());§this.addAbility(new ConditionalTriggeredAbility(ability, new ManaWasSpentCondition(ColoredManaSymbol.U),§"if {U} was spent to cast {this}, return target creature to its owner's hand."),§new ManaSpentToCastWatcher());§}§public OgreSavant(final OgreSavant card) {§super(card);§}§@Override§public OgreSavant copy() {§return new OgreSavant(this);§}§}§
public class Anathemancer extends CardImpl {§public Anathemancer(UUID ownerId) {§super(ownerId, 33, "Anathemancer", Rarity.UNCOMMON, new CardType[]{CardType.CREATURE}, "{1}{B}{R}");§this.expansionSetCode = "ARB";§this.subtype.add("Zombie");§this.subtype.add("Wizard");§this.power = new MageInt(2);§this.toughness = new MageInt(2);§EntersBattlefieldTriggeredAbility ability = new EntersBattlefieldTriggeredAbility(new DamageTargetEffect(new AnathemancerCount()));§ability.addTarget(new TargetPlayer());§this.addAbility(ability);§this.addAbility(new UnearthAbility(new ManaCostsImpl("{5}{B}{R}")));§}§public Anathemancer(final Anathemancer card) {§super(card);§}§@Override§public Anathemancer copy() {§return new Anathemancer(this);§}§}§class AnathemancerCount implements DynamicValue {§@Override§public int calculate(Game game, Ability sourceAbility, Effect effect) {§if (sourceAbility.getFirstTarget() == null) {§return 0;§}§FilterLandPermanent filter = new FilterLandPermanent();§filter.add(Predicates.not(new SupertypePredicate("Basic")));§filter.add(new ControllerIdPredicate(sourceAbility.getFirstTarget()));§return game.getBattlefield().count(filter, sourceAbility.getSourceId(), sourceAbility.getControllerId(), game);§}§@Override§public DynamicValue copy() {§return new AnathemancerCount();§}§@Override§public String toString() {§return "1";§}§@Override§public String getMessage() {§return "nonbasic lands that player controls";§}§}§
public class ArchitectsOfWill extends CardImpl {§public ArchitectsOfWill(UUID ownerId) {§super(ownerId, 17, "Architects of Will", Rarity.COMMON, new CardType[]{CardType.ARTIFACT, CardType.CREATURE}, "{2}{U}{B}");§this.expansionSetCode = "ARB";§this.subtype.add("Human");§this.subtype.add("Wizard");§this.power = new MageInt(3);§this.toughness = new MageInt(3);§Ability ability = new EntersBattlefieldTriggeredAbility(new ArchitectsOfWillEffect(), false);§ability.addTarget(new TargetPlayer());§this.addAbility(ability);§this.addAbility(new CyclingAbility(new ManaCostsImpl("{U/B}")));§}§public ArchitectsOfWill(final ArchitectsOfWill card) {§super(card);§}§@Override§public ArchitectsOfWill copy() {§return new ArchitectsOfWill(this);§}§}§class ArchitectsOfWillEffect extends OneShotEffect {§public ArchitectsOfWillEffect() {§super(Outcome.DrawCard);§this.staticText = "look at the top three cards of target player's library, then put them back in any order";§}§public ArchitectsOfWillEffect(final ArchitectsOfWillEffect effect) {§super(effect);§}§@Override§public ArchitectsOfWillEffect copy() {§return new ArchitectsOfWillEffect(this);§}§@Override§public boolean apply(Game game, Ability source) {§Player controller = game.getPlayer(source.getControllerId());§Player targetPlayer = game.getPlayer(source.getFirstTarget());§if (targetPlayer == null§|| controller == null) {§return false;§}§Cards cards = new CardsImpl();§int count = Math.min(targetPlayer.getLibrary().size(), 3);§for (int i = 0; i < count; i++) {§Card card = targetPlayer.getLibrary().removeFromTop(game);§if (card != null) {§cards.add(card);§}§}§controller.lookAtCards("Architects of Will", cards, game);§controller.putCardsOnTopOfLibrary(cards, game, source, true);§return true;§}§}§
public class ArdentPlea extends CardImpl {§public ArdentPlea (UUID ownerId) {§super(ownerId, 1, "Ardent Plea", Rarity.UNCOMMON, new CardType[]{CardType.ENCHANTMENT}, "{1}{W}{U}");§this.expansionSetCode = "ARB";§this.addAbility(new ExaltedAbility());§this.addAbility(new CascadeAbility());§}§public ArdentPlea (final ArdentPlea card) {§super(card);§}§@Override§public ArdentPlea copy() {§return new ArdentPlea(this);§}§}§
public class ArsenalThresher extends CardImpl {§public ArsenalThresher(UUID ownerId) {§super(ownerId, 131, "Arsenal Thresher", Rarity.COMMON, new CardType[]{CardType.ARTIFACT, CardType.CREATURE}, "{2}{W/B}{U}");§this.expansionSetCode = "ARB";§this.subtype.add("Construct");§this.power = new MageInt(2);§this.toughness = new MageInt(2);§this.addAbility(new AsEntersBattlefieldAbility(new ArsenalThresherEffect(),§"you may reveal any number of other artifact cards from your hand. {this} enters the battlefield with a +1/+1 counter on it for each card revealed this way"));§}§public ArsenalThresher(final ArsenalThresher card) {§super(card);§}§@Override§public ArsenalThresher copy() {§return new ArsenalThresher(this);§}§}§class ArsenalThresherEffect extends OneShotEffect {§public ArsenalThresherEffect() {§super(Outcome.Benefit);§}§public ArsenalThresherEffect(final ArsenalThresherEffect effect) {§super(effect);§}§@Override§public ArsenalThresherEffect copy() {§return new ArsenalThresherEffect(this);§}§@Override§public boolean apply(Game game, Ability source) {§Player controller = game.getPlayer(source.getControllerId());§if (controller == null) {§return false;§}§Permanent arsenalThresher = game.getPermanentEntering(source.getSourceId());§FilterArtifactCard filter = new FilterArtifactCard();§filter.add(new AnotherCardPredicate());§if (controller.chooseUse(Outcome.Benefit, "Do you want to reveal other artifacts in your hand?", source, game)) {§Cards cards = new CardsImpl();§if (controller.getHand().count(filter, source.getSourceId(), source.getControllerId(), game) > 0) {§TargetCardInHand target = new TargetCardInHand(0, Integer.MAX_VALUE, filter);§if (controller.choose(Outcome.Benefit, target, source.getSourceId(), game)) {§for (UUID uuid : target.getTargets()) {§cards.add(controller.getHand().get(uuid, game));§}§if (arsenalThresher != null) {§controller.revealCards(arsenalThresher.getIdName(), cards, game);§arsenalThresher.addCounters(CounterType.P1P1.createInstance(cards.size()), game);§}§}§}§return true;§}§return false;§}§}§
public class AvenMimeomancer extends CardImpl {§public AvenMimeomancer(UUID ownerId) {§super(ownerId, 2, "Aven Mimeomancer", Rarity.RARE, new CardType[]{CardType.CREATURE}, "{1}{W}{U}");§this.expansionSetCode = "ARB";§this.subtype.add("Bird");§this.subtype.add("Wizard");§this.power = new MageInt(3);§this.toughness = new MageInt(1);§this.addAbility(FlyingAbility.getInstance());§Ability ability = new BeginningOfUpkeepTriggeredAbility(Zone.BATTLEFIELD, new AddCountersTargetEffect(CounterType.FEATHER.createInstance()), TargetController.YOU, true);§ability.addTarget(new TargetCreaturePermanent());§ability.addEffect(new AvenEffect());§ability.addEffect(new AvenEffect2());§this.addAbility(ability);§}§public AvenMimeomancer(final AvenMimeomancer card) {§super(card);§}§@Override§public AvenMimeomancer copy() {§return new AvenMimeomancer(this);§}§}§class AvenEffect extends ContinuousEffectImpl {§public AvenEffect() {§super(Duration.Custom, Layer.PTChangingEffects_7, SubLayer.SetPT_7b, Outcome.BoostCreature);§}§public AvenEffect(final AvenEffect effect) {§super(effect);§}§@Override§public AvenEffect copy() {§return new AvenEffect(this);§}§@Override§public boolean apply(Game game, Ability source) {§Permanent target = game.getPermanent(source.getFirstTarget());§if (target != null) {§target.getPower().setValue(3);§target.getToughness().setValue(1);§return true;§}§return false;§}§@Override§public boolean isInactive(Ability source, Game game) {§Permanent creature = game.getPermanent(this.targetPointer.getFirst(game, source));§if (creature != null && creature.getCounters().getCount(CounterType.FEATHER) < 1) {§return true;§}§return false;§}§@Override§public String getText(Mode mode) {§StringBuilder sb = new StringBuilder();§sb.append("If you do, that creature has base power and toughness 3/1 and has flying for as long as it has a feather counter on it");§return sb.toString();§}§}§class AvenEffect2 extends ContinuousEffectImpl {§public AvenEffect2() {§super(Duration.Custom, Layer.AbilityAddingRemovingEffects_6, SubLayer.NA, Outcome.BoostCreature);§}§public AvenEffect2(final AvenEffect2 effect) {§super(effect);§}§@Override§public AvenEffect2 copy() {§return new AvenEffect2(this);§}§@Override§public boolean apply(Game game, Ability source) {§Permanent target = game.getPermanent(source.getFirstTarget());§if (target != null) {§if (!target.getAbilities().contains(FlyingAbility.getInstance())) {§target.addAbility(FlyingAbility.getInstance(), source.getSourceId(), game);§return true;§}§}§return false;§}§@Override§public boolean isInactive(Ability source, Game game) {§Permanent creature = game.getPermanent(this.targetPointer.getFirst(game, source));§if (creature != null && creature.getCounters().getCount(CounterType.FEATHER) < 1) {§return true;§}§return false;§}§}§
public class BantSojourners extends CardImpl {§public BantSojourners(UUID ownerId) {§super(ownerId, 125, "Bant Sojourners", Rarity.COMMON, new CardType[]{CardType.CREATURE}, "{1}{G}{W}{U}");§this.expansionSetCode = "ARB";§this.subtype.add("Human");§this.subtype.add("Soldier");§this.power = new MageInt(2);§this.toughness = new MageInt(4);§Ability ability1 = new CycleTriggeredAbility(new CreateTokenEffect(new SoldierToken()), true);§Ability ability2 = new DiesTriggeredAbility(new CreateTokenEffect(new SoldierToken()), true);§this.addAbility(ability1);§this.addAbility(ability2);§this.addAbility(new CyclingAbility(new ManaCostsImpl("{2}{W}")));§}§public BantSojourners(final BantSojourners card) {§super(card);§}§@Override§public BantSojourners copy() {§return new BantSojourners(this);§}§}§
public class BantSureblade extends CardImpl {§private static final FilterControlledPermanent filter = new FilterControlledPermanent("another multicolor permanent");§static {§filter.add(new MulticoloredPredicate());§filter.add(new AnotherPredicate());§}§public BantSureblade(UUID ownerId) {§super(ownerId, 143, "Bant Sureblade", Rarity.COMMON, new CardType[]{CardType.CREATURE}, "{G/U}{W}");§this.expansionSetCode = "ARB";§this.subtype.add("Human");§this.subtype.add("Soldier");§this.power = new MageInt(2);§this.toughness = new MageInt(1);§Ability ability = new SimpleStaticAbility(Zone.BATTLEFIELD, new ConditionalContinuousEffect(§new BoostSourceEffect(1,1, Duration.WhileOnBattlefield),§new PermanentsOnTheBattlefieldCondition(filter),§"As long as you control another multicolored permanent, {this} gets +1/+1"));§ability.addEffect(new ConditionalContinuousEffect(§new GainAbilitySourceEffect(FirstStrikeAbility.getInstance()),§new PermanentsOnTheBattlefieldCondition(filter),§"and has first strike"));§this.addAbility(ability);§}§public BantSureblade(final BantSureblade card) {§super(card);§}§@Override§public BantSureblade copy() {§return new BantSureblade(this);§}§}§